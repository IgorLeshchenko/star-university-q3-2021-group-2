{"version":3,"sources":["components/counter/counterSlice.ts","components/counter/Counter.tsx","logo.svg","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["slice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","onClick","onChange","e","target","Number","amount","setTimeout","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","counterReducer","ReactDOM","render","document","getElementById"],"mappings":"4NAIaA,EAAQC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,YAKrB,EAAoDX,EAAMY,QAAlDN,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,kBAexBI,EAAc,SAACN,GAAD,OAAsBA,EAAMO,QAAQV,OAEhDJ,IAAf,Q,OCtCO,SAASe,IACd,IAAMC,EAAQC,YAAYJ,GACpBK,EAAWC,cACjB,EAA8CC,mBAAS,KAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,OACE,gCACE,gCACE,wBAAQ,aAAW,kBAAkBC,QAAS,kBAAML,EAASZ,MAA7D,eAGA,wBAAQ,aAAW,kBAAkBiB,QAAS,kBAAML,EAASV,MAA7D,kBAIDQ,EACD,gCACE,uBACE,aAAW,uBACXZ,MAAOiB,EACPG,SAAU,SAACC,GAAD,OAAOH,EAAmBG,EAAEC,OAAOtB,UAE/C,wBAAQmB,QAAS,kBAAML,EAAST,EAAkBkB,OAAON,KAAqB,IAA9E,wBACA,wBAAQE,QAAS,kBAAML,GDIAU,ECJwBD,OAAON,IAAoB,EDIhC,SAACH,GACjDW,YAAW,WACTX,EAAST,EAAkBmB,MAC1B,QAHyB,IAACA,GCJvB,6BC5BO,UAA0B,iC,MCiB1BE,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,cAACnB,EAAD,UCGOoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCICQ,EATDC,YAAe,CAC3BC,QAAS,CACPhC,QAASiC,K,MCIbC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.d7686b18.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AppDispatch, RootState } from '../../store/store'\n\nexport const slice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = slice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number) => (dispatch: AppDispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount))\n  }, 1000)\n}\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default slice.reducer\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { decrement, increment, incrementByAmount, incrementAsync, selectCount } from './counterSlice'\n\nexport function Counter() {\n  const count = useSelector(selectCount)\n  const dispatch = useDispatch()\n  const [incrementAmount, setIncrementAmount] = useState('2')\n\n  return (\n    <div>\n      <div>\n        <button aria-label=\"Increment value\" onClick={() => dispatch(increment())}>\n          +\n        </button>\n        <button aria-label=\"Decrement value\" onClick={() => dispatch(decrement())}>\n          -\n        </button>\n      </div>\n      {count}\n      <div>\n        <input\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button onClick={() => dispatch(incrementByAmount(Number(incrementAmount)) || 0)}>Add Amount</button>\n        <button onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}>Add Async</button>\n      </div>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nimport { Counter } from './components/counter/Counter'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport counterReducer from '../components/counter/counterSlice'\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport store from './store/store'\n\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}